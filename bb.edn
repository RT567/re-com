{:min-bb-version "0.4.0"
 :tasks
 {:requires       ([babashka.fs :as fs]
                   [clojure.string :as str])
  :init           (do
                    (defn release-tag []
                      (->> (shell {:out :string}
                                  "git tag -l --sort=v:refname")
                           :out
                           str/split-lines
                           (filter (fn [s]
                                     (re-find (re-pattern "^v\\d+\\.\\d+\\.\\d+$") s)))
                           last
                           str/trim))
                    (defn release-hash []
                      (->> (release-tag)
                           (str "git rev-parse --short ")
                           (shell {:out :string})
                           :out
                           str/trim))
                    (defn latest-hash []
                      (->> "git log -1 --format=%h"
                           (shell {:out :string})
                           :out
                           str/trim))
                    (def opts (let [tag          (release-tag)
                                    latest-hash  (latest-hash)
                                    release-hash (release-hash)]
                                {:extra-env {"DAY8_RELEASE_TAG" tag
                                             "RE_COM_VERSION"   (cond-> tag
                                                                  (not= release-hash latest-hash)
                                                                  (str "--" latest-hash))}})))
  clean           (let [clean-targets ["node_modules"
                                       "run/resources/public/compiled_dev "
                                       "run/resources/public/compiled_prod"
                                       "run/resources/public/compiled_test"]]
                    (doseq [target clean-targets]
                      (println "bb clean: deleting" target)
                      (fs/delete-tree target)))
  install         (shell "npm install")
  test            {:depends [clean install]
                   :task    (do (shell opts "npx shadow-cljs compile karma-test")
                                (shell opts "npx karma start --single-run --reporters junit,dots"))}
  jar             {:depends [clean]
                   :task    (shell opts "clojure -T:build jar")}
  release-clojars {:depends [jar]
                   :task    (shell opts "clojure -T:build clojars")}
  release-demo    {:depends [clean install]
                   :task    (shell opts "npx shadow-cljs release demo")}
  watch           {:depends [install]
                   :task    (shell opts "npx shadow-cljs watch demo browser-test karma-test")}
  watch-demo      {:depends [install]
                   :task    (shell opts "npx shadow-cljs watch demo")}
  browser-test    {:depends [install]
                   :task    (shell opts "npx shadow-cljs watch browser-test")}
  deploy-aws      {:depends [release-demo]
                   :task    (shell opts "aws s3 sync run/resources/public s3://re-demo/ --acl"
                                   "public-read"
                                   "--cache-control"
                                   "max-age=2592000,public")}}}
